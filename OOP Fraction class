#include<iostream>
using namespace std;

class Fraction
{
private:
	double numerator;
	double denominator;
public:
	Fraction()
	{
		this->numerator = 0.0;
		this->denominator = 1;
	}
	Fraction(double n, double d)
	{
		this->numerator = n;
		if (d == 0)
		{
			this->denominator = 1;
		}
		else
		{
			this->denominator = d;
		}
	}
	Fraction(const Fraction& f)
	{
		this->numerator = f.numerator;
		this->denominator = f.denominator;
	}
	Fraction operator *(const Fraction& m)
	{
		Fraction f;
		f.numerator = this->numerator * m.numerator;
		f.denominator = this->denominator * m.denominator;
		return f;
	}
	Fraction operator /(const Fraction& d)
	{
		Fraction f;
		f.numerator = this->numerator * d.denominator;
		f.denominator = this->denominator * d.numerator;
		return f;
	}
	bool operator ==(const Fraction& a)
	{
		if (this->numerator == a.numerator && this->denominator == a.denominator)
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	void setNumerator(double n)
	{
		this->numerator = n;
	}
	void setDenominator(double d)
	{
		if (d == 0)
		{
			this->denominator = 1;
		}
		else
		{
			this->denominator = d;
		}
	}
	double getNumerator() const {
		return this->numerator;
	}
	double getDenominator() const {
		return this->denominator;
	}
	const void Display()
	{
		cout << endl << this->numerator << "/" << this->denominator << endl << endl;
	}
};

int main()
{
	Fraction f1(1, 2);
	Fraction f2;
	f2.setNumerator(1);
	f2.setDenominator(6);
	Fraction f3 = f1 / f2;
	Fraction f4 = f1 * f2;
	cout << "F1:-\n";
	f1.Display();
	cout << "F2:-\n";
	f2.Display();
	cout << "F3:-\n";
	f3.Display();
	cout << "F4:-\n";
	f4.Display();
	if (f2 == f3)
	{
		cout << "\nEquals\n" << endl;
	}
	else
	{
		cout << "\nNot Equals\n\n" << endl;
	}
	system("pause");
	return 0;
}
