#include<iostream>
#include<Windows.h>
using namespace std;

const int HASHSIZE = 5;

//--------------LINK LIST--------------------//
struct Node {
	int data;
	Node* next;
};

class LinkList {
private:
	Node* head;
public:
	LinkList():head(nullptr){}
	void add(int data) {
		Node* ptr = new Node();
		ptr->data = data;
		if (head == nullptr) {
			head = ptr;
		}
		else {
			Node* iterator = head;
			while (iterator->next != nullptr) {
				iterator = iterator->next;
			}
			iterator->next = ptr;
		}
		ptr->next = nullptr;
	}
	void dispay() {
		if (head == NULL)
			return;
		Node* iterator = head;
		while (iterator != nullptr) {
			cout << iterator->data << " ";
			iterator = iterator->next;
		}
	}
	int getListSize(Node* head) {
		if (head == NULL)
			return 0;
		int size = 0;
		Node* iterator = head;
		while (iterator != nullptr) {
			iterator = iterator->next;
			size++;
		}
		return size;
	}
	bool search(int data)
	{
		if (head == NULL)
			return false;
		cout << "\nSearching for " << data << " ... \n";
		Node* iterator = head;
		int count = 1;
		bool isFound = false;
		while (iterator != nullptr) {
			if (iterator->data == data)
			{
				cout << data << " found at node no " << count << endl << endl;
				return true;
			}
			iterator = iterator->next;
			count++;
		}
		cout << data << " not found\n\n";
		return false;
	}
	void sortList()
	{
		if (head == NULL)
			return;
		Node* iterator1= head;
		Node* iterator2;
		int swap = 0;
		cout << "\n\nList Sorted successfully\n\n";
		while (iterator1 != NULL)
		{
			iterator2 = iterator1->next;
			while (iterator2 != NULL)
			{
				if (iterator1->data > iterator2->data)
				{
					swap = iterator1->data;
					iterator1->data = iterator2->data;
					iterator2->data = swap;
				}
				iterator2 = iterator2->next;
			}
			iterator1 = iterator1->next;
		}
	}
	Node* getHead() {
		return this->head;
	}
	void deleteNode(int data)
	{
		if (head == NULL)
			return;
		if (head->next == NULL)
		{
			Node* temp = head;
			head = NULL;
			cout << "\n\n" << data << " deleted successfully\n\n";
			delete[] temp;
		}
		if (head->data == data && head->next != NULL)
		{
			Node* temp = head;
			head = head->next;
			cout << "\n\n" << data << " deleted successfully\n\n";
			delete[] temp;
		}
		else
		{
			Node* iterator = head;
			Node* previous = head;
			bool isFound = false;
			while (iterator != nullptr) {
				if (iterator->data == data)
				{
					isFound = true;
					break;
				}
				previous = iterator;
				iterator = iterator->next;
			}
			if (isFound)
			{
				Node* temp = iterator;
				previous->next = iterator->next;
				delete[] temp;
				cout << "\n\n" << data << " deleted successfully\n\n";
			}
			else
			{
				cout << "\n\n" << data << " not found\n\n";
			}
		}
	}
	~LinkList() {
		if (head == NULL)
			return;
		Node* temp = head;
		while (temp != nullptr) {
			head = temp;
			temp = temp->next;
			delete[] head;
		}
	}
};

int HashValue(int hashKey)
{
	return hashKey % HASHSIZE;
}

void menu()
{
	cout << "1)ADD KEY\n";
	cout << "2)Display Hash Map\n";
	cout << "3)Search Hash Key\n";
	cout << "4)Delete\n";
	cout << "5)Exit\n";
	cout << "=>Select: ";
}

void Display(LinkList l[])
{
	for (int i = 0; i < HASHSIZE; i++)
	{
		cout << i << "=> ";
		l[i].dispay();
		cout << endl;
	}
}

int main()
{
	LinkList l[HASHSIZE];
	char select = '\0';
	int hashKey = 0;
	int hashValue = 0;
	while (1)
	{
		menu();
		cin >> select;
		switch (select)
		{
		case '1':
			cout << "Enter Number: ";
			cin >> hashKey;
			hashValue = HashValue(hashKey);
			l[hashValue].add(hashKey);
			cout << "\n\nADDED SUCCESSFULLY\n\n";
			break;
		case '2':
			Display(l);
			system("pause");
			break;
		case '3':
			cout << "Enter Number to search: ";
			cin >> hashKey;
			hashValue = HashValue(hashKey);
			if (l[hashValue].search(hashKey))
			{
				cout << "Map " << hashValue << "=> \n";
			}
			system("pause");
			break;
		case '4':
			cout << "Enter Number to delete: ";
			cin >> hashKey;
			hashValue = HashValue(hashKey);
			l[hashValue].deleteNode(hashKey);
			cout << "\n\nDeleted SUCCESSFULLY\n\n";
			system("pause");
			break;
		case '5':
			cout << "\n\nExited Successfully\n\n";
			return 0;
			break;
		default:
			cout << "\n\nInvalid Input\n\n";
		}
		Sleep(500);
		system("cls");
	}

	return 0;
}
